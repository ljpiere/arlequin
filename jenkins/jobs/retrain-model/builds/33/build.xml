<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1540.v295eccc9778f">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>ml_drift</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@752.vdddedf804e72">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@2.2265.v140e610fe9d5">
      <stagesUUID>c47bb64e-c8ae-4dd5-b0b4-1d011fdffd75</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@2.2265.v140e610fe9d5">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Resolver contenedores</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>sh</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>script</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">
          set -eu
          CID_PY=$(docker ps -qf &quot;label=com.docker.compose.service=pyspark-client&quot; || true)
          if [ -z &quot;$CID_PY&quot; ]; then CID_PY=$(docker ps -qf &quot;name=pyspark-client&quot;); fi
          [ -n &quot;$CID_PY&quot; ] || { echo &quot;[ERROR] No se encontró el contenedor pyspark-client&quot;; docker ps; exit 1; }
          echo &quot;$CID_PY&quot; &gt; .cid_py
        </value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Esperar MLflow y deps</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>sh</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>script</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">
          set -eu
          CID_PY=$(cat .cid_py)

          # Espera MLflow (hasta 20 intentos)
          for i in $(seq 1 20); do
            if docker exec -i &quot;$CID_PY&quot; sh -lc &quot;curl -sS -I ${MLFLOW_URL} &gt;/dev/null 2&gt;&amp;1&quot;; then
              echo &quot;[OK] MLflow responde&quot;; break
            fi
            echo &quot;[wait] MLflow aún no responde (${i}/20)&quot;; sleep 3
            [ $i -eq 20 ] &amp;&amp; { echo &quot;[ERROR] MLflow no responde en ${MLFLOW_URL}&quot;; exit 2; }
          done

          # Instala deps si faltan
          docker exec -i &quot;$CID_PY&quot; sh -lc &apos;
            python3 - &lt;&lt;PY
try:
  import mlflow, sklearn, pandas, numpy
  print(&quot;deps OK&quot;)
except Exception:
  raise SystemExit(1)
PY
          &apos; || docker exec -i &quot;$CID_PY&quot; sh -lc &apos;
            apt-get update &amp;&amp; apt-get install -y --no-install-recommends procps curl || true
            python3 -m pip install --no-cache-dir -r /scripts/requirements.txt
          &apos;
        </value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Train with Spark</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                        <name>sh</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>script</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">
          set -eu
          CID_PY=$(cat .cid_py)
          CMD=&quot;export MLFLOW_TRACKING_URI=${MLFLOW_URL};                spark-submit --master ${SPARK_MASTER_URL}                  --conf spark.hadoop.fs.defaultFS=${HDFS_URI}                  ${TRAIN_SCRIPT}&quot;
          docker exec -i &quot;$CID_PY&quot; sh -lc &quot;$CMD&quot;
        </value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>c47bb64e-c8ae-4dd5-b0b4-1d011fdffd75</uuid>
          </stages>
          <postBuild>
            <conditions>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
                <condition>success</condition>
                <branch>
                  <name>default</name>
                  <steps>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <name>echo</name>
                      <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                        <arguments class="linked-hash-map">
                          <entry>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <key>message</key>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                              <value class="string">✅ Entrenamiento OK — revisa el run en MLflow.</value>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                          </entry>
                        </arguments>
                      </args>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                  </steps>
                </branch>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
                <condition>failure</condition>
                <branch>
                  <name>default</name>
                  <steps>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <name>echo</name>
                      <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                        <arguments class="linked-hash-map">
                          <entry>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <key>message</key>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                            <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                              <value class="string">❌ Falló — mira los logs arriba.</value>
                            </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                          </entry>
                        </arguments>
                      </args>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                  </steps>
                </branch>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
            </conditions>
          </postBuild>
          <environment>
            <variables class="linked-hash-map">
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>SPARK_MASTER_URL</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">spark://spark-master:7077</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>HDFS_URI</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">hdfs://namenode:9000</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>TRAIN_SCRIPT</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">/scripts/train_model.py</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
              <entry>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                  <key>MLFLOW_URL</key>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                  <value class="string">http://mlflow:5000</value>
                </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
              </entry>
            </variables>
          </environment>
          <agent>
            <agentType>
              <key>any</key>
            </agentType>
          </agent>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
  </actions>
  <queueId>81</queueId>
  <timestamp>1756519890268</timestamp>
  <startTime>1756519890348</startTime>
  <duration>0</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>SUCCESS</result>
    <script>pipeline {
  agent any
  environment {
    SPARK_MASTER_URL = &apos;spark://spark-master:7077&apos;
    HDFS_URI         = &apos;hdfs://namenode:9000&apos;
    TRAIN_SCRIPT     = &apos;/scripts/train_model.py&apos;
    MLFLOW_URL       = &apos;http://mlflow:5000&apos;
  }
  stages {
    stage(&apos;Resolver contenedores&apos;) {
      steps {
        sh &apos;&apos;&apos;
          set -eu
          CID_PY=$(docker ps -qf &quot;label=com.docker.compose.service=pyspark-client&quot; || true)
          if [ -z &quot;$CID_PY&quot; ]; then CID_PY=$(docker ps -qf &quot;name=pyspark-client&quot;); fi
          [ -n &quot;$CID_PY&quot; ] || { echo &quot;[ERROR] No se encontró el contenedor pyspark-client&quot;; docker ps; exit 1; }
          echo &quot;$CID_PY&quot; &gt; .cid_py
        &apos;&apos;&apos;
      }
    }
    stage(&apos;Esperar MLflow y deps&apos;) {
      steps {
        sh &apos;&apos;&apos;
          set -eu
          CID_PY=$(cat .cid_py)

          # Espera MLflow (hasta 20 intentos)
          for i in $(seq 1 20); do
            if docker exec -i &quot;$CID_PY&quot; sh -lc &quot;curl -sS -I ${MLFLOW_URL} &gt;/dev/null 2&gt;&amp;1&quot;; then
              echo &quot;[OK] MLflow responde&quot;; break
            fi
            echo &quot;[wait] MLflow aún no responde (${i}/20)&quot;; sleep 3
            [ $i -eq 20 ] &amp;&amp; { echo &quot;[ERROR] MLflow no responde en ${MLFLOW_URL}&quot;; exit 2; }
          done

          # Instala deps si faltan
          docker exec -i &quot;$CID_PY&quot; sh -lc &apos;
            python3 - &lt;&lt;PY
try:
  import mlflow, sklearn, pandas, numpy
  print(&quot;deps OK&quot;)
except Exception:
  raise SystemExit(1)
PY
          &apos; || docker exec -i &quot;$CID_PY&quot; sh -lc &apos;
            apt-get update &amp;&amp; apt-get install -y --no-install-recommends procps curl || true
            python3 -m pip install --no-cache-dir -r /scripts/requirements.txt
          &apos;
        &apos;&apos;&apos;
      }
    }
    stage(&apos;Train with Spark&apos;) {
      steps {
        sh &apos;&apos;&apos;
          set -eu
          CID_PY=$(cat .cid_py)
          CMD=&quot;export MLFLOW_TRACKING_URI=${MLFLOW_URL}; \
               spark-submit --master ${SPARK_MASTER_URL} \
                 --conf spark.hadoop.fs.defaultFS=${HDFS_URI} \
                 ${TRAIN_SCRIPT}&quot;
          docker exec -i &quot;$CID_PY&quot; sh -lc &quot;$CMD&quot;
        &apos;&apos;&apos;
      }
    }
  }
  post {
    success { echo &apos;✅ Entrenamiento OK — revisa el run en MLflow.&apos; }
    failure { echo &apos;❌ Falló — mira los logs arriba.&apos; }
  }
}
</script>
    <loadedScripts class="linked-hash-map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>1247666834</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>717549838</long>
      </entry>
      <entry>
        <string>runQueue</string>
        <long>9767217647</long>
      </entry>
      <entry>
        <string>run</string>
        <long>6974653085</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>640586734</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>4330995016</long>
      </entry>
    </timings>
    <internalCalls class="sorted-set"/>
    <sandbox>true</sandbox>
    <iota>19</iota>
    <head>1:19</head>
    <start>2</start>
    <done>false</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>false</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>